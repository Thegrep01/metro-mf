diff --git a/dist/src/lib/start/loadMetroConfig.js b/dist/src/lib/start/loadMetroConfig.js
index 0baf8126f0d4bc82928ece9d47cd205f2fc44ce6..cf8a47217c11060c126595de3e9aa6fb8e528362 100644
--- a/dist/src/lib/start/loadMetroConfig.js
+++ b/dist/src/lib/start/loadMetroConfig.js
@@ -13,34 +13,46 @@ import { reactNativePlatformResolver } from './metroPlatformResolver.js';
  * Get the config options to override based on RN CLI inputs.
  */
 function getOverrideConfig(ctx, config) {
-    const outOfTreePlatforms = Object.keys(ctx.platforms).filter(
+  const outOfTreePlatforms = Object.keys(ctx.platforms).filter(
     // @ts-expect-error - TBD
-    (platform) => ctx.platforms[platform].npmPackageName);
-    const resolver = {
-        platforms: [...Object.keys(ctx.platforms), 'native'],
-    };
-    if (outOfTreePlatforms.length) {
+    (platform) => ctx.platforms[platform].npmPackageName
+  );
+  const resolver = {
+    platforms: [...Object.keys(ctx.platforms), 'native'],
+  };
+  if (outOfTreePlatforms.length) {
+    // @ts-expect-error - TBD
+    resolver.resolveRequest = reactNativePlatformResolver(
+      outOfTreePlatforms.reduce((result, platform) => {
         // @ts-expect-error - TBD
-        resolver.resolveRequest = reactNativePlatformResolver(outOfTreePlatforms.reduce((result, platform) => {
+        result[platform] = ctx.platforms[platform].npmPackageName;
+        return result;
+      }, {}),
+      config.resolver?.resolveRequest
+    );
+  }
+  const require = createRequire(import.meta.url);
+  return {
+    resolver,
+    serializer: {
+      // We can include multiple copies of InitializeCore here because metro will
+      // only add ones that are already part of the bundle
+      getModulesRunBeforeMainModule: () => [
+        ...(config.serializer?.getModulesRunBeforeMainModule?.() || []),
+        require.resolve(
+          path.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'),
+          { paths: [ctx.root] }
+        ),
+        ...outOfTreePlatforms.map((platform) =>
+          require.resolve(
             // @ts-expect-error - TBD
-            result[platform] = ctx.platforms[platform].npmPackageName;
-            return result;
-        }, {}), config.resolver?.resolveRequest);
-    }
-    const require = createRequire(import.meta.url);
-    return {
-        resolver,
-        serializer: {
-            // We can include multiple copies of InitializeCore here because metro will
-            // only add ones that are already part of the bundle
-            getModulesRunBeforeMainModule: () => [
-                require.resolve(path.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'), { paths: [ctx.root] }),
-                ...outOfTreePlatforms.map((platform) => require.resolve(
-                // @ts-expect-error - TBD
-                `${ctx.platforms[platform].npmPackageName}/Libraries/Core/InitializeCore`, { paths: [ctx.root] })),
-            ],
-        },
-    };
+            `${ctx.platforms[platform].npmPackageName}/Libraries/Core/InitializeCore`,
+            { paths: [ctx.root] }
+          )
+        ),
+      ],
+    },
+  };
 }
 /**
  * Load Metro config.
@@ -49,15 +61,15 @@ function getOverrideConfig(ctx, config) {
  * dynamic user options in `ctx`.
  */
 export default async function loadMetroConfig(ctx, options = {}) {
-    const cwd = ctx.root;
-    const projectConfig = await resolveConfig(options.config, cwd);
-    if (projectConfig.isEmpty) {
-        throw new RnefError(`No Metro config found in ${cwd}`);
-    }
-    logger.debug(`Reading Metro config from ${projectConfig.filepath}`);
-    // @ts-expect-error - we're fine with this
-    if (!global.__REACT_NATIVE_METRO_CONFIG_LOADED) {
-        const warning = `
+  const cwd = ctx.root;
+  const projectConfig = await resolveConfig(options.config, cwd);
+  if (projectConfig.isEmpty) {
+    throw new RnefError(`No Metro config found in ${cwd}`);
+  }
+  logger.debug(`Reading Metro config from ${projectConfig.filepath}`);
+  // @ts-expect-error - we're fine with this
+  if (!global.__REACT_NATIVE_METRO_CONFIG_LOADED) {
+    const warning = `
 =================================================================================================
 From React Native 0.73, your project's Metro config should extend '@react-native/metro-config'
 or it will fail to build. Please copy the template at:
@@ -65,12 +77,12 @@ https://github.com/react-native-community/template/blob/main/template/metro.conf
 This warning will be removed in future (https://github.com/facebook/metro/issues/1018).
 =================================================================================================
     `;
-        for (const line of warning.trim().split('\n')) {
-            console.warn(line);
-        }
+    for (const line of warning.trim().split('\n')) {
+      console.warn(line);
     }
-    const config = await loadConfig({ cwd, ...options });
-    const overrideConfig = getOverrideConfig(ctx, config);
-    return mergeConfig(config, overrideConfig);
+  }
+  const config = await loadConfig({ cwd, ...options });
+  const overrideConfig = getOverrideConfig(ctx, config);
+  return mergeConfig(config, overrideConfig);
 }
 //# sourceMappingURL=loadMetroConfig.js.map
